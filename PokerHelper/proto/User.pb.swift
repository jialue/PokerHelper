// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: User.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Proto_User: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".User"

  var id: Int32 = 0

  var username: String = String()

  var email: String = String()

  var salt: String = String()

  var password: String = String()

  var date: String = String()

  var nickname: String = String()

  var friends: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.username)
      case 3: try decoder.decodeSingularStringField(value: &self.email)
      case 4: try decoder.decodeSingularStringField(value: &self.salt)
      case 5: try decoder.decodeSingularStringField(value: &self.password)
      case 6: try decoder.decodeSingularStringField(value: &self.date)
      case 7: try decoder.decodeSingularStringField(value: &self.nickname)
      case 70: try decoder.decodeRepeatedInt32Field(value: &self.friends)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if !self.salt.isEmpty {
      try visitor.visitSingularStringField(value: self.salt, fieldNumber: 4)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 5)
    }
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 6)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 7)
    }
    if !self.friends.isEmpty {
      try visitor.visitPackedInt32Field(value: self.friends, fieldNumber: 70)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_User: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "username"),
    3: .same(proto: "email"),
    4: .same(proto: "salt"),
    5: .same(proto: "password"),
    6: .same(proto: "date"),
    7: .same(proto: "nickname"),
    70: .same(proto: "friends"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto_User) -> Bool {
    if self.id != other.id {return false}
    if self.username != other.username {return false}
    if self.email != other.email {return false}
    if self.salt != other.salt {return false}
    if self.password != other.password {return false}
    if self.date != other.date {return false}
    if self.nickname != other.nickname {return false}
    if self.friends != other.friends {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
