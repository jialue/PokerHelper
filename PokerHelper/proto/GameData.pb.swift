// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: GameData.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Proto_GameData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GameData"

  var id: Int32 = 0

  var date: String = String()

  var small: Int32 = 0

  var big: Int32 = 0

  /// buyin each time
  var buyin: Int32 = 0

  /// real value * by 100
  var ratio: Int32 = 0

  /// total stack  
  var stack: Int32 = 0

  var players: [Proto_Player] = []

  var owner: Int32 = 0

  var location: String = String()

  var detail: String = String()

  var `public`: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.date)
      case 3: try decoder.decodeSingularInt32Field(value: &self.small)
      case 4: try decoder.decodeSingularInt32Field(value: &self.big)
      case 5: try decoder.decodeSingularInt32Field(value: &self.buyin)
      case 6: try decoder.decodeSingularInt32Field(value: &self.ratio)
      case 7: try decoder.decodeSingularInt32Field(value: &self.stack)
      case 8: try decoder.decodeSingularInt32Field(value: &self.owner)
      case 70: try decoder.decodeRepeatedMessageField(value: &self.players)
      case 800: try decoder.decodeSingularStringField(value: &self.location)
      case 900: try decoder.decodeSingularStringField(value: &self.detail)
      case 1000: try decoder.decodeSingularBoolField(value: &self.`public`)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 2)
    }
    if self.small != 0 {
      try visitor.visitSingularInt32Field(value: self.small, fieldNumber: 3)
    }
    if self.big != 0 {
      try visitor.visitSingularInt32Field(value: self.big, fieldNumber: 4)
    }
    if self.buyin != 0 {
      try visitor.visitSingularInt32Field(value: self.buyin, fieldNumber: 5)
    }
    if self.ratio != 0 {
      try visitor.visitSingularInt32Field(value: self.ratio, fieldNumber: 6)
    }
    if self.stack != 0 {
      try visitor.visitSingularInt32Field(value: self.stack, fieldNumber: 7)
    }
    if self.owner != 0 {
      try visitor.visitSingularInt32Field(value: self.owner, fieldNumber: 8)
    }
    if !self.players.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.players, fieldNumber: 70)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 800)
    }
    if !self.detail.isEmpty {
      try visitor.visitSingularStringField(value: self.detail, fieldNumber: 900)
    }
    if self.`public` != false {
      try visitor.visitSingularBoolField(value: self.`public`, fieldNumber: 1000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_GameData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "date"),
    3: .same(proto: "small"),
    4: .same(proto: "big"),
    5: .same(proto: "buyin"),
    6: .same(proto: "ratio"),
    7: .same(proto: "stack"),
    70: .same(proto: "players"),
    8: .same(proto: "owner"),
    800: .same(proto: "location"),
    900: .same(proto: "detail"),
    1000: .same(proto: "public"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto_GameData) -> Bool {
    if self.id != other.id {return false}
    if self.date != other.date {return false}
    if self.small != other.small {return false}
    if self.big != other.big {return false}
    if self.buyin != other.buyin {return false}
    if self.ratio != other.ratio {return false}
    if self.stack != other.stack {return false}
    if self.players != other.players {return false}
    if self.owner != other.owner {return false}
    if self.location != other.location {return false}
    if self.detail != other.detail {return false}
    if self.`public` != other.`public` {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
