// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: GameData.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Proto_GameData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GameData"

  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var date: Proto_Date {
    get {return _storage._date ?? Proto_Date()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_storage._date = nil}

  var smallBlind: Int32 {
    get {return _storage._smallBlind}
    set {_uniqueStorage()._smallBlind = newValue}
  }

  var bigBlind: Int32 {
    get {return _storage._bigBlind}
    set {_uniqueStorage()._bigBlind = newValue}
  }

  var buyin: Int64 {
    get {return _storage._buyin}
    set {_uniqueStorage()._buyin = newValue}
  }

  var ratio: Float {
    get {return _storage._ratio}
    set {_uniqueStorage()._ratio = newValue}
  }

  var players: [Proto_GamePlayer] {
    get {return _storage._players}
    set {_uniqueStorage()._players = newValue}
  }

  var location: String {
    get {return _storage._location}
    set {_uniqueStorage()._location = newValue}
  }

  var detail: String {
    get {return _storage._detail}
    set {_uniqueStorage()._detail = newValue}
  }

  var visible: Bool {
    get {return _storage._visible}
    set {_uniqueStorage()._visible = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._smallBlind)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._bigBlind)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._buyin)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._ratio)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._players)
        case 8: try decoder.decodeSingularStringField(value: &_storage._location)
        case 9: try decoder.decodeSingularStringField(value: &_storage._detail)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._visible)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._smallBlind != 0 {
        try visitor.visitSingularInt32Field(value: _storage._smallBlind, fieldNumber: 3)
      }
      if _storage._bigBlind != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bigBlind, fieldNumber: 4)
      }
      if _storage._buyin != 0 {
        try visitor.visitSingularInt64Field(value: _storage._buyin, fieldNumber: 5)
      }
      if _storage._ratio != 0 {
        try visitor.visitSingularFloatField(value: _storage._ratio, fieldNumber: 6)
      }
      if !_storage._players.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._players, fieldNumber: 7)
      }
      if !_storage._location.isEmpty {
        try visitor.visitSingularStringField(value: _storage._location, fieldNumber: 8)
      }
      if !_storage._detail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._detail, fieldNumber: 9)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_GameData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "date"),
    3: .same(proto: "smallBlind"),
    4: .same(proto: "bigBlind"),
    5: .same(proto: "buyin"),
    6: .same(proto: "ratio"),
    7: .same(proto: "players"),
    8: .same(proto: "location"),
    9: .same(proto: "detail"),
    10: .same(proto: "visible"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _date: Proto_Date? = nil
    var _smallBlind: Int32 = 0
    var _bigBlind: Int32 = 0
    var _buyin: Int64 = 0
    var _ratio: Float = 0
    var _players: [Proto_GamePlayer] = []
    var _location: String = String()
    var _detail: String = String()
    var _visible: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _date = source._date
      _smallBlind = source._smallBlind
      _bigBlind = source._bigBlind
      _buyin = source._buyin
      _ratio = source._ratio
      _players = source._players
      _location = source._location
      _detail = source._detail
      _visible = source._visible
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Proto_GameData) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._date != other_storage._date {return false}
        if _storage._smallBlind != other_storage._smallBlind {return false}
        if _storage._bigBlind != other_storage._bigBlind {return false}
        if _storage._buyin != other_storage._buyin {return false}
        if _storage._ratio != other_storage._ratio {return false}
        if _storage._players != other_storage._players {return false}
        if _storage._location != other_storage._location {return false}
        if _storage._detail != other_storage._detail {return false}
        if _storage._visible != other_storage._visible {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
